% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BDSim.R
\name{BDSim}
\alias{BDSim}
\title{General rate Birth-Death simulation}
\usage{
BDSim(N0, pp, qq, tmax, pshape = NULL, qshape = NULL, env_pp = NULL,
  env_qq = NULL, pshifts = NULL, qshifts = NULL)
}
\arguments{
\item{N0}{initial number of species, usually 1. Good param
to tweak if one is observing a low sample size when testing.}

\item{pp}{function to hold the speciation rate over time. It
could be a function of time (to be an exponential rate or weibull scale), a
function of time and an environmental variable, or a vector of rates to be
accompanied by a vector of rate shifts \code{pshifts}.}

\item{qq}{similar as above, but for extinction rate.

Note: \code{pp} and \code{qq} must always be greater than 0}

\item{tmax}{ending time of simulation. Any species still living
after tmax is considered extant, and any species that would be generated
after \code{tmax} is not born.}

\item{pshape}{shape param for the Weibull distribution for
age-dependent speciation. Default is 0, where \code{pp} will be considered a
time-dependent exponential rate. For \code{pshape != NULL}, \code{pp} will
be considered a scale, and \code{rexp_var} will draw a Weibull distribution
instead.}

\item{qshape}{similar as above, but for extinction rate.}

\item{env_pp}{a matrix containing time points and values of an
enviromental variable, like temperature, for each time point. This will be
used to create a speciation rate, so \code{pp} must be a function of time
and said variable.}

\item{env_qq}{similar as above, but for extinction rate.}

\item{pshifts}{vector of rate shifts. First element must be
starting time for simulation (0). It must have the same length as \code{pp}.
E.g. \code{pp = c(0.1, 0.2, 0.1)}, \code{pshifts = c(0, 10, 20)} means p
will be 0.1 from 0 to 10, 0.2 from 10 to 20, and 0.1 from 20 to \code{tmax}.
Note that using this  method for step-function rates is currently slower than using
\code{ifelse}.}

\item{qshifts}{similar as above, but for extinction rate.}
}
\value{
the return list of either \code{BDSimConstant} or
\code{BDSimGeneral}, which have the same elements, as follows

\describe{
\item{\code{TE}}{list of extinction times, with tmax + 0.01 as the time of
extinction for extant species.}

\item{\code{TS}}{list of speciation times, with -0.01 as the time of
speciation for species that started the simulation.}

\item{\code{PAR}}{list of parents. Species that started the simulation have
NA, while species that were generated during the simulation have their
parent's number. Species are numbered as they are born.}

\item{\code{EXTANT}}{list of booleans representing whether a species is
extant.}}
}
\description{
\code{BDSim} takes an initial number of species, speciation and extinction
rate functions and a maximum time of simulation, together with multiple
options to alter the rates, and calls \code{BDSimConstant} or
\code{BDSimGeneral} with the rates.
}
\examples{

# since both \\code{BDSimConstant} and \\code{BDSimGeneral} have been tested in
# their respective man pages, we will spend some time here giving examples of
# possible combinations of diversification scenarios.

# consider first the simplest regimen, constant speciation and extinction
N0 <- 1
p <- 0.11
q <- 0.08
tmax <- 40
sim <- BDSim(N0, p, q, tmax) # this must be run until we have more than 1 sp
# we can plot the phylogeny to take a look
library(ape)
phy <- MakePhylo(sim)
plot.phylo(phy)

# now let us complicate speciation more, maybe a linear function
N0 <- 1
p <- function(t) {
  return(0.09+0.005*t)
}
q <- 0.08
tmax <- 40
sim <- BDSim(N0, p, q, tmax)

# what if we want q to be a step function?
q <- c(0.08, 0.07, 0.08)
qshifts <- c(0, 20, 35)
# let us take a look at how MakeRate will make it a step function
qq <- MakeRate(q, fshifts=qshifts)
plot(seq(0, tmax, 0.1), qq(seq(0, tmax, 0.1)), type='l')
# note that this is slower than creating a step function with ifelse()

# looking good, we will keep everything else the same

p <- function(t) {
  return(0.09+0.005*t)
}
q <- c(0.08, 0.07, 0.08)
qshifts <- c(0, 20, 35)

N0 <- 1
tmax <- 40
sim <- BDSim(N0, p, q, tmax, qshifts=qshifts)

# we can supply a shape parameter to try age-dependent rates
N0 <- 1
p <- 10
pshape <- 2
q <- 0.08
tmax <- 40
sim <- BDSim(N0, p, q, tmax, pshape=pshape)

# finally, we can also have a rate dependent on an environmental variable,
# like temperature data in RPANDA

library(RPANDA)
data(InfTemp)
N0 <- 1
p <- function(t) {
  return(1 + 0.25*t)
}

# note the scale for the age-dependency can be a time-varying function

pshape <- 1.5
q <- function(t, env) {
  return(0.15 * exp(-0.01 * env))
}
env_q <- InfTemp
tmax <- 40
sim <- BDSim(N0, p, q, tmax, pshape=pshape, env_q=InfTemp)

# one can mix and match all of these scenarios as they wish - age-dependency
# and constant rates, age-dependent and temperature-dependent rates, etc. The
# only combination that is not allowed is a vector rate and environmental
# data, but one can get around that as follows,
N0 <- 1
p <- function(t, env) {
  ifelse(t < 20, env,
         ifelse(t < 30, env/2, 2*env/3))
}
pshape <- 2
env_p <- InfTemp
q <- 0.08
tmax <- 40
sim <- BDSim(N0, p, q, tmax, pshape=pshape, env_pp=env_p)

}
\author{
written by Bruno do Rosario Petrucci.
}
