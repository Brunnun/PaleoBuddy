% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample.species.R
\name{sample.species}
\alias{sample.species}
\title{Constant and time-dependent rate species sampling}
\usage{
sample.species(sim, rr, tMax, S)
}
\arguments{
\item{sim}{A \code{sim} object, usually an output of \code{bd.sim}.}

\item{rr}{Sampling rate (per species per million years) over time. It can be 
a \code{numeric} describing a constant rate, a \code{function(t)} describing 
the variation in sampling over time \code{t}, a \code{function(t, env)} 
describing the variation in sampling over time following both time AND 
an environmental variable (please see \code{envRR} for details) or a 
\code{vector} containing rates that correspond to each rate between sampling
rate shift times times (please see \code{rShifts}). Note that \code{rr} should
should always be greater than or equal to zero.}

\item{tMax}{The maximum simulation time, used by \code{rexp.var}. A sampling
time greater than \code{tMax} would mean the occurrence is sampled after the
present, so for consistency we require this argument. This is also required
to ensure time follows the correct direction both in the Poisson process and
in the return.}

\item{S}{The species number to be sampled. Since \code{sample.species} will be 
called by a wrapper using \code{lapply}, it is through \code{S} that we apply
this function.}
}
\value{
A vector of occurrence times for that species.
}
\description{
Generates a vector of occurrence times for a species in a simulation using a
a Poisson process. Allows for the Poisson rate to be (1) a constant, (2) a 
function of time, (3) a function of time and an environmental variable, or (4)
a vector of numbers. For sampling of more than one species and/or taking into 
account species age instead of absolute time, see \code{sample.clade} and 
\code{sample.adpp}.
Note that while the Poisson process occurs in forward time, we return (both in
birth-death functions and here) results in backwards time, so that time is
inverted using \code{tMax} both at the beginning and end of 
\code{sample.species}.
}
\examples{

###
# let us start with a linear increase in preservation rate

# simulate a group
sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)

# in case first simulation was short-lived
while ((sim$TS[1] - sim$TE[1]) < 10) {
  sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)
}

# preservation function
r <- function(t) {
  return(1 + 0.25*t)
}

# time
t <- seq(0, 10, by = 0.1)

# visualizing from the past to the present
plot(x = t, y = rev(r(t)), main="Simulated preservation", type = "l",
     xlab = "Mya", ylab = "preservation rate",
     xlim = c(10, sim$TE[1]))

# sample
occs <- sample.species(sim = sim, rr = r, tMax = 10, S = 1)

# check histogram
hist(occs,
     xlim = c(10, sim$TE[1]),
     xlab = "Mya")
lines(t, rev(r(t)))

###
# now let us try a step function

# simulate a group
sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)

# in case first simulation was short lived
while ((sim$TS[1] - sim$TE[1]) < 10) {
  sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)
}

# we can create the sampling rate here from a few vectors

# rates
rList <- c(1, 3, 0.5)

# rate shift times -  this could be c(10, 6, 2)
# and would produce the same function
rShifts <- c(0, 4, 8)

# create the rate to visualize it
r <- make.rate(rList, tMax = 10, fShifts = rShifts)

# time
t <- seq(0, 10, by = 0.1)

# visualizing the plot from past to present
plot(x = t, y = rev(r(t)), main = "Simulated preservation", type = "l",
     xlab = "Mya", ylab = "preservation rate",
     xlim = c(10, sim$TE[1]))

# sample
occs <- sample.species(sim = sim, rr = r, tMax = 10, S = 1)

# check histogram
hist(occs,
     xlim = c(10, sim$TE[1]),
     xlab = "Mya")

# frontiers of each regime
abline(v = 10 - rShifts, col = "red")

###
# we can create a step function in a different way as well

# simulate a group
sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)

# in case first simulation was short-lived
while ((sim$TS[1] - sim$TE[1]) < 10) {
  sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)
}

# preservation function
r <- function(t) {
  ifelse(t < 4, 1,
         ifelse(t < 8, 3, 0.5))
}
# note how this function should be exactly the same as the previous one

# time
t <- seq(0, 10, by = 0.1)

# visualizing the plot from past to present
plot(x = t, y = rev(r(t)), main = "Simulated preservation", type = "l",
     xlab = "Mya", ylab = "preservation rate",
     xlim = c(10, sim$TE[1]))

# sample
occs <- sample.species(sim = sim, rr = r, tMax = 10, S = 1)

# check histogram
hist(occs,
     xlim = c(10, sim$TE[1]),
     xlab = "Mya")
abline(v = 10 - rShifts, col = "red")

###
# finally we could generate sampling dependent on temperature

if (requireNamespace("RPANDA", quietly = TRUE)) {
  # simulate a group
  sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)
  
  # in case first simulation was short-lived
  while ((sim$TS[1] - sim$TE[1]) < 10) {
    sim <- bd.sim(n0 = 1, pp = 0.1, qq = 0.1, tMax = 10)
  }
  
  # preservation function dependent on temperature
  r_t <- function(t, env) {
    return(0.25*env)
  }
  
  # get the temperature data
  data(InfTemp, package = "RPANDA")
  
  # final preservation
  r <- make.rate(r_t, envF = InfTemp)
  
  # visualizing the plot from past to present
  plot(x = t, y = rev(r(t)), main = "Simulated preservation", type = "l",
       xlab = "Mya", ylab = "preservation rate",
       xlim = c(10, sim$TE[1]))
  
  # sample
  occs <- sample.species(sim = sim, rr = r, tMax = 10, S = 1)
  
  # check histogram
  hist(occs,
       xlim = c(10, sim$TE[1]),
       xlab = "Mya")
  lines(t, rev(r(t)))
}

}
\author{
Bruno do Rosario Petrucci and Matheus Januario.
}
