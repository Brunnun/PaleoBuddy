% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/var.rate.div.R
\name{var.rate.div}
\alias{var.rate.div}
\title{Expected diversity for general exponential rates}
\usage{
var.rate.div(ff, n0 = 1, t, tMax = NULL, envF = NULL, fShifts = NULL)
}
\arguments{
\item{ff}{A rate for the exponential distribution that can be any function of
time. One can also supply data for an environmental variable (see below for the
\code{envF} param) and get the expected number of species for a hybrid function 
of time and said variable. Finally, one can instead supply a vector of rates to 
\code{ff} and a vector of shifts to \code{fShifts} and get a step function. It 
is more efficient to create a step function using \code{ifelse} however (see 
examples below).}

\item{n0}{The initial number of species is by default 1, but one can change to
any positive number. We allow for negative initial values as well, but of 
course that is not biologically sound.

Note: \code{var.rate.div} will find the expected number of daughters given a
rate \code{ff} and an initial number of parents \code{n0}, so in a
biological context \code{ff} is diversification rate, not speciation (unless
extinction is \code{0}).}

\item{t}{A time vector over which to consider the distribution.}

\item{tMax}{A number corresponding to the maximum simulation time.
Needed to ensure \code{fShifts} runs the correct way.}

\item{envF}{A two dimensional matrix with time as the first column and the
desired environmental variable as the second. Note that supplying a function 
with one argument and a non-\code{NULL} \code{envF}, and vice versa, will 
return an error.}

\item{fShifts}{Vector of rate shifts. First element must be the starting
time for the simulation (\code{0} or \code{tMax}). It must have the same length 
as \code{pp}. \code{c(0, x, tMax)} is equivalent to \code{c(tMax, tMax - x, 0)}
for the purposes of \code{make.rate}.}
}
\value{
A vector of the expected number of species per time point supplied
in \code{t}, which can then be used to plot vs. \code{t}.
}
\description{
Calculates the expected species diversity on an interval given a (possibly time
dependent) exponential rate. Takes any number, vector of numbers, function of 
time or function of time and an environmental variable as a rate. Allows for 
flexibility by optionally taking a number of initial species, environmental 
data and vector of rate shift times. Calculates the diversity for any vector
of time.
}
\examples{

# let us first create a vector of times to use in these examples.
t <- seq(0, 50, 0.1)

###
# we can start simple: create a constant rate
ff <- 0.1

# set this up so we see rates next to diversity
par(mfrow = c(1,2))

# see how the rate looks
r <- make.rate(0.5)
plot(t, rep(r, length(t)), type = 'l')

# get the diversity and plot it
div <- var.rate.div(ff, t = t)
plot(t, div, type = 'l')

###
# something a bit more complex: a linear rate
ff <- function(t) {
  return(0.01*t)
}

# visualize the rate
r <- make.rate(ff)
plot(t, r(t), type = 'l')

# get the diversity and plot it
div <- var.rate.div(ff, t = t)
plot(t, div, type = 'l')

###
# remember: ff is diversity!

# we can create speciation...
pp <- function(t) {
  return(-0.01*t + 0.2)
}

# ...and extinction...
qq <- function(t) {
  return(0.01*t)
}

# ...and code ff as diversification
ff <- function(t) {
  return(pp(t) - qq(t))
}

# visualize the rate
r <- make.rate(ff)
plot(t, r(t), type = 'l')

# get diversity and plot it
div <- var.rate.div(ff, n0 = 2, t)
plot(t, div, type = 'l')

###
# remember: ff can be any time-varying function!

# such as a sine
ff <- function(t) {
  return(sin(t)*0.5)
}

# visualize the rate
r <- make.rate(ff)
plot(t, r(t), type = 'l')

# we can have any number of starting species
div <- var.rate.div(ff, n0 = 2, t)
plot(t, div, type = 'l')

###
# we can use ifelse() to make a step function like this
ff <- function(t) {
  return(ifelse(t < 2, 0.1,
          ifelse(t < 3, 0.3,
           ifelse(t < 5, -0.2, 0.05))))
}

# change t so things are faster
t <- seq(0, 10, 0.1)

# visualize the rate
r <- make.rate(ff)
plot(t, r(t), type = 'l')

# get the diversity and plot it
div <- var.rate.div(ff, t = t)
plot(t, div, type = 'l')

# important note: this method of creating a step function might be annoying,
# but when running thousands of simulations it will provide a much faster
# integration than when using our method of transforming a rates and shifts
# vector into a function of time

###
# ...which we can do as follows

# rates vector
ff <- c(0.1, 0.3, -0.2, 0.05)

# rate shifts vector
fShifts <- c(0, 2, 3, 5)

# visualize the rate
r <- make.rate(ff, tMax = 10, fShifts = fShifts)
plot(t, r(t),type = 'l')

# we set the longest running examples to not run in a package check, but a user
# interested in the usability of the function may feel free to run them
\dontrun{
  # get the diversity and plot it
  div <- var.rate.div(ff, t = t, tMax = 10, fShifts = fShifts)
  plot(t, div, type = 'l')
}

# note the delay in running var.rate.div using this method. integrating a step
# function created using the methods in make.rate() is slow, as explained in
# the make.rate documentation)

# it is also impractical to supply a rate and a shifts vector and
# have an environmental dependency, so in cases where one looks to run
# more than a couple dozen simulations, and when one is looking to have a
# step function modified by an environmental variable, consider using ifelse()

# finally let us see what we can do with environmental variables

# RPANDA supplies us with some really useful environmental dataframes
# to use as an example, let us try temperature
if (requireNamespace("RPANDA", quietly = TRUE)) {
  # get the temperature data
  data(InfTemp, package = "RPANDA")
  
  # diversification
  ff <- function(t, env) {
    return(0.002*env)
  }
  
  # visualize the rate
  r <- make.rate(ff, envF = InfTemp)
  plot(t, r(t), type = 'l')
  
  # get diversity and plot it
  div <- var.rate.div(ff, t = t, envF = InfTemp)
  plot(t, div, type = 'l')
  
  ###
  # we can also have a function that depends on both time AND temperature
  
  # diversification
  ff <- function(t, env) {
    return(0.02 * env - 0.001 * t)
  }
  
  # visualize the rate
  r <- make.rate(ff, envF = InfTemp)
  plot(t, r(t), type = 'l')
  
  \dontrun{
    # get diversity and plot it
    div <- var.rate.div(ff, t = t, envF = InfTemp)
    plot(t, div, type = 'l')
} 
  ###
  # as mentioned above, we could also use ifelse() to construct a step function
  # that is modulated by temperature
  
  # diversification
  ff <- function(t, env) {
    return(ifelse(t < 2, 0.1 + 0.01*env,
            ifelse(t < 5, 0.2 - 0.005*env,
             ifelse(t < 8, 0.1 + 0.005*env, 0.08))))
  }
  
  # visualize the rate
  r <- make.rate(ff, envF = InfTemp)
  plot(t, r(t), type = 'l')
\dontrun{
    div <- var.rate.div(ff, t = t, envF = InfTemp)
    plot(t, div, type = 'l')
}
}

}
