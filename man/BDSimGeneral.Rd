% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BDSimGeneral.R
\name{BDSimGeneral}
\alias{BDSimGeneral}
\title{Returns information of a simulated clade for general speciation and
extinction rates}
\usage{
BDSimGeneral(
  N0,
  pp,
  qq,
  tmax,
  pshape = NULL,
  qshape = NULL,
  fast = TRUE,
  trueExt = FALSE
)
}
\arguments{
\item{N0}{initial number of species, usually 1. Good param to
tweak if one is observing a low sample size when testing.}

\item{pp}{function to hold the speciation rate over time.
\code{BDSim} supplies this function with a \code{pp} ready to be used, so
that the only other information \code{BDSimGeneral} needs is a shape in case
the rate is to be age-dependent.}

\item{qq}{similar to above, but for extinction rate.}

\item{tmax}{ending time of simulation. Any species still living
after \code{tmax} is considered extant, and any species that would be
generated after \code{tmax} is not born.}

\item{pshape}{shape param for the Weibull distribution for
age-dependent speciation. Default is 0, where \code{pp} will be considered a
time-dependent exponential rate. For \code{pshape != NULL}, \code{pp} will
be considered a scale, and \code{rexp_var} will draw a Weibull distribution
instead.}

\item{qshape}{similar as above, but for extinction rate.}

\item{fast}{when \code{TRUE}, sets \code{rexp_var} to throw away waiting times
higher than the maximum simulation time. Should be \code{FALSE} for unbiased
testing of age dependency. User might also se it to \code{FALSE} for more
accurate waiting times.}

\item{trueExt}{when \code{TRUE}, time of extinction of extant species will be
the true time, otherwise it will be tmax+0.01. Need to be \code{TRUE} when
testing age-dependent extinction}
}
\value{
a list of vectors, as follows

\describe{
\item{\code{TE}}{list of extinction times, with -0.01 as the time of
extinction for extant species.}

\item{\code{TS}}{list of speciation times, with tmax+0.01 as the time of
speciation for species that started the simulation.}

\item{\code{PAR}}{list of parents. Species that started the simulation have
NA, while species that were generated during the simulation have their
parent's number. Species are numbered as they are born.}

\item{\code{EXTANT}}{list of booleans representing whether a species is
extant.}}
}
\description{
\code{BDSimGeneral} takes an initial number of species, speciation and
extinction rates (either functions of time or of time and some
environmental variable), a maximum simulation time and possibly a shape for
age-dependent speciation and/or extinction.
}
\examples{

# first we define a function to calculate the mean diversity and var at time t
SimMean<-function(t, SimList){
  SimExtantT<-as.numeric(lapply(1:length(SimList),function(y){
    TS <- tmax - SimList[[y]]$TS
    TE <- tmax - SimList[[y]]$TE
    length(which(TS<=t&TE>=t))}))
  return(list(mean=mean(SimExtantT), var=(var(SimExtantT))))
}
# note the tmax -, rescaling the vectors so we can work only with functions
# going forward in time

# also, we need functions to calculate the expected var at time t
Int<-function(t, div) {
  return(integrate(div, 0, t)$value)
}
DivVar<-function(t, div, qq){
  return(N0*exp(Int(t, div))*(exp(Int(t, div)) - 1 + 2*exp(Int(t,div))*
                                integrate(Vectorize(function(x)
                                  exp(-Int(x, div))*qq(x)), 0, t)$value))
}
# and a time parameter we will need
tmax <- 40
Time <- 1:tmax

# now we can test a couple scenarios

# first, even though this is BDSimGeneral, we can try constant rates
N0 <- 1
tmax <- 40
p <- 0.11
q <- 0.08
SimList <- lapply(1:10000, function(x){ if ((x-1) \%\% 100 == 0) {print(x)}
  BDSimGeneral(N0, p, q, tmax)})

# let us make vectors to hold the average diversity and variance
pp <- Vectorize(function(t) p)
qq <- Vectorize(function(t) q)
div <- Vectorize(function(t) pp(t) - qq(t))

MeanDiv <- unlist(lapply(Time, function(x) SimMean(x, SimList=SimList)$mean))
ExpectedDiv <- VarRateExp(div, 1, Time)

MeanVar <- unlist(lapply(Time, function(x) SimMean(x, SimList=SimList)$var))
ExpectedVar <- unlist(lapply(Time, function(x) DivVar(x, div, qq)))

# and now let us check out the plots
plot(Time, log(MeanDiv), type='l', main="Species Diversity", xlab="Time (My)",
     ylab="log(Diversity)")
lines(Time, log(ExpectedDiv), col='RED')
legend(x=5, y=log(max(MeanDiv)), legend=c("Expected", "Observed"),
       col=c("RED", "BLACK"), lty=c(1,1))
plot(Time, log(MeanVar), type='l')
lines(Time, log(ExpectedVar), type='l', col='RED')
legend(x=5, y=log(max(MeanVar)), legend=c("Expected", "Observed"),
       col=c("RED", "BLACK"), lty=c(1,1))

}
\author{
written by Bruno do Rosario Petrucci.
}
