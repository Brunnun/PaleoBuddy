% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BDSimGeneral.R
\name{BDSimGeneral}
\alias{BDSimGeneral}
\title{Non-constant rate Birth-Death simulation}
\usage{
BDSimGeneral(
  n0,
  pp,
  qq,
  tMax,
  pShape = NULL,
  qShape = NULL,
  fast = TRUE,
  trueExt = FALSE
)
}
\arguments{
\item{n0}{initial number of species, usually 1. Good parameter
to tweak if one is observing a low sample size when testing.}

\item{pp}{function to hold the speciation rate over time. It will either be
interpreted as an exponential rate, or a Weibull scale if 
\code{pShape != NULL}.}

\item{qq}{similar to above, but for the extinction rate.

Note: this function is meant to be called by \code{BDSim}, so it neither
allows for as much flexibility, nor call \code{MakeRate}. If the user wishes
to use \code{BDSimGeneral} with environmental or step-function rates, they
can generate the rate with \code{MakeRate} and supply it to the function.}

\item{tMax}{ending time of simulation. Any species still living
after \code{tMax} is considered extant, and any species that would be
generated after \code{tMax} is not born.}

\item{pShape}{shape parameter for the Weibull distribution for age-dependent
speciation. Default is \code{NULL}, where \code{pp} will be considered a
time-dependent exponential rate. For \code{pShape != NULL}, \code{pp} will
be considered a scale, and \code{rexp_var} will draw a Weibull distribution
instead.}

\item{qShape}{similar as above, but for the extinction rate.}

\item{fast}{used for \code{BDSimGeneral}. When \code{TRUE}, sets 
\code{rexp_var} to throw away waiting times higher than the maximum 
simulation time. Should be \code{FALSE} for unbiased testing of age 
dependency. User might also se it to \code{FALSE} for more accurate waiting
times.}

\item{trueExt}{used for \code{BDSimGeneral}. When \code{TRUE}, time of 
extinction of extant species will be the true time, otherwise it will be 
tMax+0.01. Need to be \code{TRUE} when testing age-dependent 
extinction.}
}
\value{
a list of vectors, as follows

\describe{
\item{\code{TE}}{list of extinction times, with -0.01 as the time of
extinction for extant species.}

\item{\code{TS}}{list of speciation times, with tMax+0.01 as the time of
speciation for species that started the simulation.}

\item{\code{PAR}}{list of parents. Species that started the simulation have
NA, while species that were generated during the simulation have their
parent's number. Species are numbered as they are born.}

\item{\code{EXTANT}}{list of booleans representing whether each species is
extant.}}
}
\description{
\code{BDSimGeneral} takes an initial number of species, speciation and
extinction rates (either constants, functions of time, or of time and an
environmental variable), a maximum simulation time and possibly a shape for
age-dependent speciation and/or extinction. It then generates the speciation 
and extinction times, parent and status information for the species in the 
simulation. Time runs from \code{tMax} to 0, to be consistent with the 
literature, though one can easily invert that by subtracting the results from
\code{tMax}.
}
\examples{

# first we define a time vector for plotting
tMax <- 40
time <- 1:tMax

# now we can test a couple scenarios

###
# first, even though this is BDSimGeneral, we can try constant rates

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.11

# extinction
q <- 0.08

# run the simulation
sim <- BDSimGeneral(n0, p, q, tMax)

# run until we get more than 1 species
while (length(sim$TE) < 2) {
  sim <- BDSim(n0, p, q, tMax)
}

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- MakePhylo(sim)
  ape::plot.phylo(phy)
}

###
# we can complicate things further with a linear function as a rate
# BDSimGeneral takes longer so we run examples for 1000 replicates instead

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- function(t) {
  return(0.05 + 0.005*t)
}

# extinction
q <- 0.05

# run the simulation
sim <- BDSimGeneral(n0, p, q, tMax)

# run until we get more than 1 species
while (length(sim$TE) < 2) {
  sim <- BDSim(n0, p, q, tMax)
}

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- MakePhylo(sim)
  ape::plot.phylo(phy)
}

###
# we can also create a step function. Keep in mind this is a slower way than by
# creating step functions using ifelse()

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation rate
p <- function(t) {
  return(0.05 + 0.005*t)
}

# list of extinction rates
qList <- c(0.05, 0.06, 0.07)

# list of shift times. Note qShifts could be c(40, 20, 10) for
# identical results
qShifts <- c(0, 20, 30)

# let us take a look at how MakeRate will make it a step function
q <- MakeRate(qList, fShifts = qShifts)

# and plot it
plot(seq(0, tMax, 0.1), q(seq(0, tMax, 0.1)), type = 'l',
     main = "Extintion rate as a step function", xlab = "Time (My)",
     ylab = "Rate (species/My)")
# note that this is slower than creating a step function with ifelse(), in this
# case q <- function(t) ifelse(t < 20, 0.04, ifelse(t < 30, 0.06, 0.07))

# also note that if done with ifelse(), the function must go from 0, instead of
# from tMax

# run the simulation
sim <- BDSimGeneral(n0, p, q, tMax)

# run until we get more than 1 species
while (length(sim$TE) < 2) {
  sim <- BDSim(n0, p, q, tMax)
}

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- MakePhylo(sim)
  ape::plot.phylo(phy)
}

###
# another feature to add is age dependency
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.15

# extinction - a Weibull scale
q <- 10

# extinction shape
qShape <- 1

# run simulations - note fast = FALSE and trueExt = TRUE so we can accurately
# fit the results to a Weibull
sim <- BDSimGeneral(n0, p, q, tMax, qShape = qShape)

# run until we get more than 1 species
while (length(sim$TE) < 2) {
  sim <- BDSimGeneral(n0, p, q, tMax, qShape = qShape)
}

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- MakePhylo(sim)
  ape::plot.phylo(phy)
}

###
# scale can be time-dependent
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.15

# extinction - a Weibull scale
q <- function(t) {
  return(8 + 0.05*t)
}

# extinction shape
qShape <- 1

# run simulations 
sim <- BDSimGeneral(n0, p, q, tMax, qShape = qShape)

# run until we get more than 1 species
while (length(sim$TE) < 2) {
  sim <- BDSimGeneral(n0, p, q, tMax, qShape = qShape)
}

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- MakePhylo(sim)
  ape::plot.phylo(phy)
}

###
# finally, we could have environmental dependency on a rate
if (requireNamespace("RPANDA", quietly = TRUE)) {
  # initial number of species
  n0 <- 1
  
  # maximum simulation time
  tMax <- 40
  
  # temperature-dependent speciation
  p_t <- function(t, temp) {
    return(0.04*exp(0.15*temp))
  }
  
  # extinction
  q <- 0.05
  
  # using RPANDA to get the temperature data
  data(InfTemp, package="RPANDA")
  
  # speciation
  p <- MakeRate(p_t, tMax, envF = InfTemp)
  
  # since we need many species to be able to test this effectively using
  # RPANDA, and the rates become really noisy with temperature, we set
  # only 100 simulations to finish it in a reasonable time
  
  # run simulations
  sim <- BDSim(n0, p, q, tMax)
  
  # run until we get more than 1 species
  while (length(sim$TE) < 2) {
    sim <- BDSimGeneral(n0, p, q, tMax)
  }
  
  # we can plot the phylogeny to take a look
  if (requireNamespace("ape", quietly = TRUE)) {
    phy <- MakePhylo(sim)
    ape::plot.phylo(phy)
  }
}

}
\author{
written by Bruno do Rosario Petrucci.
}
