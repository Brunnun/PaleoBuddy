% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findLineages.R
\name{findLineages}
\alias{findLineages}
\title{Separate a PaleoBuddy simulation into monophyletic clades}
\usage{
findLineages(sim, S = NULL)
}
\arguments{
\item{sim}{a simulation from the \code{BDSim} function. The function accepts
simulations with any number of starting species.}

\item{S}{a list of species in \code{sim}. If not supplied, \code{S} will be
the starting species in the simulation (i.e. those for which the parent is
\code{NA}).}
}
\value{
A \code{list} object with (named) sim objects corresponding to the
clades originated from species in S. For each clade, an extra list
\code{sim$LIN} is included so the user can identify the order of species
in the return with the order of species in the original simulation.
}
\description{
\code{findLineages} finds and separates monophyletic clades from simulations
generated by \code{BDSim} function. As a default, it finds the clades descended
from the starting species (i.e. those with no parent).
}
\examples{

# we will start with examples where S are the starting species

# first, let us try a simulation with 3 clades,
sim<-BDSim(N0 = 3, pp = .1, qq = 0.1, tmax = 10)

# in case first simulation has a small number of lineages
while(length(sim$TE)<20){
  sim<-BDSim(N0 = 3, pp = .1, qq = 0.1, tmax = 10)
}

# using the functions
test <- findLineages(sim)

# testing if it works:
par(mfrow=c(1,length(test)))
for(i in 1:length(test)){
  if(sum(test[[i]]$PAR \%in\% i)<1){
    plot(NA, xlim = c(-1,1), ylim=c(-1,1))
    text("simulation with \n just one lineage", x = 0, y=.5, cex=2)
  }else{
    if(requireNamespace("ape", quietly = TRUE)) {
      p=ape::plot.phylo(MakePhylo(test[[i]]),
                        main="red = extinction events \n
                        blue = speciation events");
      ape::axisPhylo()
    }

    # checking speciation times:
    for(j in 2:length(test[[i]]$TS)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TS[j],
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TS[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="blue")
    }

    # checking extinction times:
    for(j in 1:length(sim$TE)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TE[j],
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TE[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="red")
    }
  }
}

# it works with any number of clades, of course
sim<-BDSim(N0 = 5, pp = .1, qq = 0.1, tmax = 10)

# in case first simulation has a small number of lineages
while(length(sim$TE)<20){
  sim<-BDSim(N0 = 5, pp = .1, qq = 0.1, tmax = 10)
}

# using the functions
test <- findLineages(sim)

# testing if it works:
par(mfrow=c(1,length(test)))
for(i in 1:length(test)){
  if(sum(test[[i]]$PAR \%in\% i)<1){
    plot(NA, xlim = c(-1,1), ylim=c(-1,1))
    text("simulation with \n just one lineage", x = 0, y=.5, cex=2)
  }else{
    if(requireNamespace("ape", quietly = TRUE)) {
      p=ape::plot.phylo(MakePhylo(test[[i]]),
                        main="red = extinction events \n blue = speciation events");
      ape::axisPhylo()
    }

    # checking speciation times:
    for(j in 2:length(test[[i]]$TS)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TS[j],
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TS[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="blue")
    }

    # checking extinction times:
    for(j in 1:length(sim$TE)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TE[j],
        sort(test[[i]]$TS, decreasing = TRUE)[2]-test[[i]]$TE[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="red")
    }
  }
}

# including one clade, of course
sim<-BDSim(N0 = 1, pp = .2, qq = 0.1, tmax = 10)
while(length(sim$TE)<10){
 sim<-BDSim(N0 = 1, pp = .1, qq = 0.1, tmax = 10)
}


par(mfrow=c(1,2))
if (requireNamespace("ape", quietly = TRUE)) {
 ape::plot.phylo(MakePhylo(sim), main="original")
 ape::axisPhylo()
 ape::plot.phylo(MakePhylo(findLineages(sim)[[1]]), main="after findLineages()")
 ape::axisPhylo()
 #those should be equal
}

# now let us check that when S does not contain a starting species, we still
# get correct subsets of the simulation
sim <- BDSim(1, 0.1, 0.05, 40)
# making sure we have a couple of clades to explore
while ((length(which(sim$PAR==1)) < 3) | (length(which(sim$PAR==2)) < 3) |
                                        (length(which(sim$PAR==3)) < 3)){
  sim <- BDSim(1, 0.2, 0.1, 10)
}

if (requireNamespace("ape", quietly=TRUE)) {
  # first we plot the clade started by 1
  ape::plot.phylo(MakePhylo(sim), main="original")

  # this should look the same
  ape::plot.phylo(MakePhylo(findLineages(sim)[[1]]), main="after findLineages()")

  # and these should be part of the previous phylogenies
  ape::plot.phylo(MakePhylo(findLineages(sim, c(2, 3))$clade_2))
  ape::plot.phylo(MakePhylo(findLineages(sim, c(2, 3))$clade_3))
}
}
\author{
written by Bruno Petrucci and Matheus Januario.
}
