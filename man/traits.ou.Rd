% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traits.ou.R
\name{traits.ou}
\alias{traits.ou}
\title{Simulate trait evolution through the Ornstein-Uhlenbeck process}
\usage{
traits.ou(
  tMax,
  tStart = 0,
  nTraits = 1,
  sigma2 = 1,
  theta = 0.5,
  mean = 0,
  X0 = 0,
  nPoints = 100
)
}
\arguments{
\item{tMax}{The only required parameter. Ending time of the simulation, usually
inherited from a birth-death or sampling function.}

\item{tStart}{The starting time of the simulation. Standard Brownian Motion 
starts at \code{0}, so we set the default value as such, but this argument is
required to accurately return a function based on the trait evolution of a
trait for a species born after the beginning of a birth-death simulation. Note
that the trait value for \code{t = 0} is always \code{0}.}

\item{nTraits}{The number of traits to be simulated. Traits are assumed to be
independent from one another. By default, the function simulates one trait.}

\item{sigma2}{The variance of the normal distribution associated with the
increase in trait value for each time step. This defines the variance of 
trait values, which will be 
\code{sigma2 / (2*theta) * (1 - exp(-2 * theta * t))} for an interval
\code{t}.  The default is \code{1}. This can optionally be a vector with size 
equal to \code{nTraits}, in which case each trait will have a different 
variance.}

\item{theta}{The intensity of drift towards the target value \code{mean}. 
Increasing \code{theta} leads to a higher probability of trait values being 
close to the target value, which decreases variance (see \code{sigma2}).
The default is \code{0.5}. This can optionally be a vector with size 
equal to \code{nTraits}, in which case each trait will have a different 
drift intensity.}

\item{mean}{The target value of the process. The higher the difference between
a trait value and its target, the more likely the next time step is to bringing
the value closer to the target. Default is \code{0}. This can optionally be a 
vector with size equal to \code{nTraits}, in which case each trait will have a 
different target value.}

\item{X0}{Given the complexity of the OU process, we allow for an argument
defining the starting value for the trait. The default is \code{0}, so that
choosing all default options leads to a process starting at the same value as
its target. This can optionally be a vector with size equal to \code{nTraits},
in which case each trait will have a different starting value.}

\item{nPoints}{The total number of points in the discretization of the process.
While Brownian Motion is a continuous process, we must simulate it discretely.
As such, the user can provide a number of time points, by default set to 
\code{100}, for which the exact trait values will be calculated. Remaining
values of time will have values predicted by linear interpolation (see 
\code{?approxfun}).}
}
\value{
A named list of functions, where \code{traits.ou$traitN(t)}
corresponds to the trait value of trait \code{N} at time \code{t}.
}
\description{
Generates trait evolution simulations for a number of traits under the
Ornstein-Uhlenbeck process. This is a generalization of Brownian Motion that
has a target value. Each trait starts with a value \code{X0}, and for each time
interval receives an increase defined by its difference from the target value
and a normally distributed variate. See references for the specific mathematics
of the process.
}
\examples{
###
# we can start with a simple trait with all default values

# set a maximum simulation time
tMax <- 10

# a starting time
tStart <- 0

# and a number of time points
nPoints <- 100

# which lets us find a vector of time points
times <- seq(tStart, tMax, (tMax - tStart) / nPoints)

# calculate OU function
ouFunc <- traits.ou(tMax)$trait1

# plot it
plot(times, ouFunc(times), type = 'l', main = "Trait values for trait1",
     xlab = "Time (my)", ylab = "Trait value")

###
# a lot of customization is possible - let us try a 
# different sigma2 and theta

# set a maximum simulation time
tMax <- 10

# a starting time
tStart <- 0

# and a number of time points
nPoints <- 100

# which lets us find a vector of time points
times <- seq(tStart, tMax, (tMax - tStart) / nPoints)

# try a lower value for sigma2
sigma2 <- 0.5

# and a higher theta
theta <- 1

# calculate OU function
ouFunc <- traits.ou(tMax, sigma2 = sigma2, theta = theta)$trait1

# plot it
plot(times, ouFunc(times), type = 'l', main = "Trait values for trait1",
     xlab = "Time (my)", ylab = "Trait value")

###
# we can calculate any number of traits at once

# set a maximum simulation time
tMax <- 10

# a starting time
tStart <- 0

# and a number of time points
nPoints <- 100

# which lets us find a vector of time points
times <- seq(tStart, tMax, (tMax - tStart) / nPoints)

# if sigma2 is a vector, each trait will have
# a different variance, in the corresponding order
sigma2 <- c(5, 0.5, 1)

# same for theta
theta <- c(1, 0.5, 0.25)

# and mu, but say we want to keep it a constant
mean <- 0.5

# finally, define the starting value for each trait
X0 <- c(0, 0.3, 1)

# set a seed so we can control ylim and legend position
set.seed(1)

# calculate OU functions
ouFuncs <- traits.ou(tMax, nTraits = 3, sigma2 = sigma2, theta = theta,
                     mean = mean, X0 = X0)

# plot them
plot(times, ouFuncs[[1]](times), type = 'l',
     main = "Trait values for traits with mu = 0.5",
     xlab = "Time (my)", ylab = "Trait value", ylim = c(-3, 3))
lines(times, ouFuncs[[2]](times), col = 'RED')
lines(times, ouFuncs[[3]](times), col = 'BLUE')
legend(x = 1, y = -1.5, legend = c("5, 1, 0", "0.5, 0.5, 0.3", "1, 0.25, 1"), 
      col = c('BLACK', 'RED', 'BLUE'), lty = c(1,1,1))

}
\references{
Uhlenbeck, G. E., Ornstein, L. S. (1930). On the theory of Brownian Motion. 
Phys. Rev. 36 (5): 823â€“841.

Felsenstein, J. (1988). Phylogenies and Quantitative Characters. Annual Review
of Ecology and Systematics
}
\author{
Bruno do Rosario Petrucci.
}
