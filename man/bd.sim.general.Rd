% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bd.sim.general.R
\name{bd.sim.general}
\alias{bd.sim.general}
\title{Non-constant rate Birth-Death simulation}
\usage{
bd.sim.general(
  n0,
  pp,
  qq,
  tMax,
  pShape = NULL,
  qShape = NULL,
  nFinal = c(0, Inf),
  extOnly = FALSE,
  fast = TRUE,
  trueExt = FALSE
)
}
\arguments{
\item{n0}{Initial number of species, usually 1. Good parameter
to tweak if one is observing a low sample size when testing.}

\item{pp}{Function to hold the speciation rate over time. It will either be
interpreted as an exponential rate, or a Weibull scale if 
\code{pShape != NULL}.}

\item{qq}{Similar to above, but for the extinction rate.

Note: this function is meant to be called by \code{bd.sim}, so it neither
allows for as much flexibility, nor call \code{make.rate}. If the user wishes
to use \code{bd.sim.general} with environmental or step-function rates, they
can generate the rate with \code{make.rate} and supply it to the function.}

\item{tMax}{Ending time of simulation. Any species still living
after \code{tMax} is considered extant, and any species that would be
generated after \code{tMax} is not born.}

\item{pShape}{Shape parameter for the Weibull distribution for age-dependent
speciation. Default is \code{NULL}, where \code{pp} will be considered a
time-dependent exponential rate. For \code{pShape != NULL}, \code{pp} will
be considered a scale, and \code{rexp.var} will draw a Weibull distribution
instead.}

\item{qShape}{Similar as above, but for the extinction rate.}

\item{nFinal}{An interval of acceptable number of species at the end of the
simulation. If not supplied, default is \code{c(0, Inf)}, so that any number
of species is accepted. If supplied, \code{bd.sim.general} will run until the
number of total species generated, or, if \code{extOnly = TRUE}, the number of
extant species at the end of the simulation, lies within the interval.}

\item{extOnly}{A boolean indicating whether \code{nFinal} should be taken as
the number of total or extant species during the simulation. If \code{TRUE},
\code{bd.sim.general} will run until the number of extant species lies within
the \code{nFinal} interval. If \code{FALSE}, as default, it will run until the
total number of species generated lies within that interval.}

\item{fast}{When \code{TRUE}, sets \code{rexp.var} to throw away waiting times 
higher than the maximum simulation time. Should be \code{FALSE} for unbiased 
testing of age dependency. User might also se it to \code{FALSE} for more 
accurate waiting times.}

\item{trueExt}{When \code{TRUE}, time of extinction of extant species will be 
the true time, otherwise it will be \code{tMax+0.01}. Need to be \code{TRUE} 
when testing age-dependent extinction.}
}
\value{
A list of vectors, as follows

\describe{
\item{\code{TE}}{List of extinction times, with \code{-0.01} as the time of
extinction for extant species.}

\item{\code{TS}}{List of speciation times, with \code{tMax + 0.01} as the time 
of speciation for species that started the simulation.}

\item{\code{PAR}}{List of parents. Species that started the simulation have
NA, while species that were generated during the simulation have their
parent's number. Species are numbered as they are born.}

\item{\code{EXTANT}}{List of booleans representing whether each species is
extant.}}
}
\description{
Simulates a species birth-death process with general rates for any number of
starting species. Allows for speciation and extinction rates to be either 
constants or functions of time, and optionally takes a shape parameter in case
speciation and/or extinction is to be age-dependent. Returns an object 
containing lists of speciation times, extinction times, parents and status 
(extant or not). Can return true extinction times or simply information on 
whether species lived after maximum simulation time. Allows for constraining on 
the number of species at the end of the simulation, either total or extant.
Note that while time runs from \code{0} to \code{tmax} on the function itself,
it runs from \code{tmax} to \code{0} on the lists returned to conform with the
literature.
}
\examples{

# we can test a couple scenarios

###
# first, even though this is bd.sim.general, we can try constant rates

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.11

# extinction
q <- 0.08

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# we can complicate things further with a linear function as a rate
# bd.sim.general takes longer so we run examples for 1000 replicates instead

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- function(t) {
  return(0.05 + 0.005*t)
}

# extinction
q <- 0.05

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# we can also create a step function. Keep in mind this is a slower way than by
# creating step functions using ifelse()

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation rate
p <- function(t) {
  return(0.03 + 0.005*t)
}

# list of extinction rates
qList <- c(0.05, 0.08, 0.11)

# list of shift times. Note qShifts could be c(40, 20, 10) for
# identical results
qShifts <- c(0, 15, 25)

# let us take a look at how make.rate will make it a step function
q <- make.rate(qList, fShifts = qShifts)

# and plot it
plot(seq(0, tMax, 0.1), q(seq(0, tMax, 0.1)), type = 'l',
     main = "Extintion rate as a step function", xlab = "Time (My)",
     ylab = "Rate (species/My)")

# a different way to define the same extinction function
q <- function(t) {
  ifelse(t < 15, 0.05,
         ifelse(t < 25, 0.08, 0.11))
}

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
# equivalent:
# sim <- bd.sim.general(n0, p, qList, tMax, qShifts = qShifts)
# this is, however, much slower

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# another feature to add is age dependency
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.1

# extinction - a Weibull scale
q <- 10

# extinction shape
qShape <- 1

# run simulations
sim <- bd.sim.general(n0, p, q, tMax, qShape = qShape, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# scale can be time-dependent
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.15

# extinction - a Weibull scale
q <- function(t) {
  return(8 + 0.05*t)
}

# extinction shape
qShape <- 1

# run simulations
sim <- bd.sim.general(n0, p, q, tMax, qShape = qShape, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# finally, we could have environmental dependency on a rate
if (requireNamespace("RPANDA", quietly = TRUE)) {
  # initial number of species
  n0 <- 1
  
  # maximum simulation time
  tMax <- 40
  
  # temperature-dependent speciation
  p_t <- function(t, temp) {
    return(0.04*exp(0.15*temp))
  }
  
  # extinction
  q <- 0.075
  
  # using RPANDA to get the temperature data
  data(InfTemp, package="RPANDA")
  
  # speciation
  p <- make.rate(p_t, tMax, envF = InfTemp)
  
  # since we need many species to be able to test this effectively using
  # RPANDA, and the rates become really noisy with temperature, we set
  # only 100 simulations to finish it in a reasonable time
  
  # run simulations
  sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
  
  # we can plot the phylogeny to take a look
  if (requireNamespace("ape", quietly = TRUE)) {
    phy <- make.phylo(sim)
    ape::plot.phylo(phy)
  }
}

}
\author{
Bruno do Rosario Petrucci.
}
