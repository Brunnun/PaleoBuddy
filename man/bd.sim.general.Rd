% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bd.sim.general.R
\name{bd.sim.general}
\alias{bd.sim.general}
\title{Non-constant rate Birth-Death simulation}
\usage{
bd.sim.general(
  n0,
  pp,
  qq,
  tMax,
  pShape = NULL,
  qShape = NULL,
  nFinal = c(0, Inf),
  extOnly = FALSE,
  trueExt = FALSE
)
}
\arguments{
\item{n0}{Initial number of species. Usually 1, in which case the simulation 
will describe the full diversification of a monophyletic lineage. Notice that 
when \code{pp} is less than or equal to \code{qq},  many simulations will go 
extinct before speciating even once. One way of generating simulations in this 
case is to increase \code{n0}. The user should notice this will simulate the 
diversification of a paraphyletic group.}

\item{pp}{Function to hold the speciation rate over time. It will either be
interpreted as an exponential rate, or a Weibull scale if 
\code{pShape != NULL}.}

\item{qq}{Similar to above, but for the extinction rate.

Note: this function is meant to be called by \code{bd.sim}, so it neither
allows for as much flexibility, nor calls \code{make.rate}. If the user wishes
to use \code{bd.sim.general} with environmental or step-function rates, they
can generate the rate with \code{make.rate} and supply it to the function.}

\item{tMax}{Ending time of simulation, in million years after the clade origin. 
Any species still living after \code{tMax} is considered extant, and any 
species that would be generated after \code{tMax} is not born.}

\item{pShape}{Shape of the age-dependency in speciation rate. This will be 
equal to the shape parameter in a Weibull distribution: when smaller than one, 
speciation rate will decrease along each species' age (negative 
age-dependency). When larger than one, speciation rate will increase along each
species's age (positive age-dependency). Default is \code{NULL}, equivalent to 
an age-independent process. For \code{pShape != NULL} (including when equal to 
one), \code{pp} will be considered a scale (= 1/rate), and \code{rexp.var} will
draw a Weibull distribution instead of an exponential. This means 
Weibull(rate, 1) = Exponential(1/rate). Note that even when 
\code{pShape != NULL}, \code{pp} may still be time-dependent.}

\item{qShape}{Similar to \code{pShape}, but for the extinction rate.

Note: Time-varying shape is implemented, so one could have \code{pShape} or 
\code{qShape} be a function of time. It is not thoroughly tested, however, 
so it may be prudent to wait for a future release where this feature is well
established.}

\item{nFinal}{A \code{vector} of length \code{2}, indicating an interval of 
acceptable number of species at the end of the simulation. Default value is 
\code{c(0, Inf)}, so that any number of species (including zero, the extinction
of the whole clade) is accepted. If different from default value, the process
will run until the number of total species reaches a number in the interval
\code{nFinal}. Please note that \code{extOnly} can modify the meaning of this 
parameter. If \code{extOnly = TRUE}, the function will run repeatedly until the
number of \emph{extant} species at the end of the simulation lies within the 
\code{nFinal} interval. Note that using values other than the default for 
\code{nFinal} might condition simulation results.}

\item{extOnly}{A \code{logical} indicating whether \code{nFinal} should be 
taken as an interval of the number of total or extant species during the 
simulation. If \code{TRUE}, the function will run repeatedly until the number 
of \emph{extant} species at the end of the simulation lies within the 
\code{nFinal} interval. If \code{FALSE} (as default), it will run until the 
\emph{total} number of species generated lies within that interval.


Note: The function returns \code{NA} if it runs for more than \code{100000}
iterations without fulfilling the requirements of \code{nFinal} and 
\code{extOnly}.}

\item{trueExt}{A \code{logical} used for \code{bd.sim.general}, indicating 
whether it should return true or truncated extinction times. When \code{TRUE}, 
time of extinction of extant species will be the true time, otherwise it will
be \code{NA} if a species is alive at the end of the simulation.}
}
\value{
A list of vectors, as follows

\describe{
\item{\code{TE}}{List of extinction times, with \code{0} as the time of
extinction for extant species.}

\item{\code{TS}}{List of speciation times, with \code{NA} as the time of
speciation for species that started the simulation.}

\item{\code{PAR}}{List of parents. Species that started the simulation have
\code{NA}, while species that were generated during the simulation have their
parent's number. Species are numbered as they are born.}

\item{\code{EXTANT}}{List of logicals representing whether each species is
extant.}}
}
\description{
Simulates a species birth-death process with general rates for any number of
starting species. Allows for the speciation/extinction rate to be (1) a 
constant, or (2) a function of time. Allows for constraining results on the 
number of species at the end of the simulation, either total or extant. The 
function can also take an optional shape argument to generate age-dependence on
speciation and/or extinction, assuming a Weibull distribution as a model of 
age-dependence. Returns an object containing vectors of speciation times, 
extinction times, parents (= species' mother species) and status at the end of 
the simulation (extant or not) for each species in the simulation. 
It may return true extinction times or simply information on whether species 
lived after the maximum simulation time. For constant rate simulations, see
\code{bd.sim.constant}. For a function that unites all scenarios, see 
\code{bd.sim}. \code{bd.sim} also allows for extra inputs, creating a
time-dependent only rate internally through \code{make.rate}. For similar
flexibility, use \code{make.rate} to generate the desired rate.
Please note while time runs from \code{0} to \code{tMax} in the simulation, it 
returns speciation/extinction times as \code{tMax} (origin of the group) to 
\code{0} (the "present" and end of simulation), so as to conform to other
packages in the literature.
}
\examples{

# we can test a couple scenarios

###
# first, even though this is bd.sim.general, we can try constant rates

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.11

# extinction
q <- 0.08

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# we can complicate things further with a linear function as a rate
# bd.sim.general takes longer so we run examples for 1000 replicates instead

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- function(t) {
  return(0.03 + 0.005*t)
}

# extinction
q <- 0.05

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# we can also create a step function

# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation rate
p <- function(t) {
  return(0.03 + 0.005*t)
}

# vector of extinction rates
qList <- c(0.06, 0.09, 0.11)

# vector of shift times. Note qShifts could be c(40, 20, 10) for
# identical results
qShifts <- c(0, 15, 25)

# let us take a look at how make.rate will make it a step function
q <- make.rate(qList, tMax = tMax, fShifts = qShifts)

# and plot it
plot(seq(0, tMax, 0.1), q(seq(0, tMax, 0.1)), type = 'l',
     main = "Extintion rate as a step function", xlab = "Time (My)",
     ylab = "Rate (species/My)")

# a different way to define the same extinction function
q <- function(t) {
  ifelse(t < 15, 0.06,
         ifelse(t < 25, 0.09, 0.11))
}

# run the simulation
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
# we could instead have used q made with make.rate
# that is, however, much slower

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# another feature to add is age dependency
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.1

# extinction - a Weibull scale
q <- 10

# extinction shape
qShape <- 1

# run simulations
sim <- bd.sim.general(n0, p, q, tMax, qShape = qShape, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# scale can be time-dependent
n0 <- 1

# maximum simulation time
tMax <- 40

# speciation
p <- 0.15

# extinction - a Weibull scale
q <- function(t) {
  return(8 + 0.05*t)
}

# extinction shape
qShape <- 1

# run simulations
sim <- bd.sim.general(n0, p, q, tMax, qShape = qShape, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

###
# finally, we could have environmental dependency on a rate
# initial number of species
n0 <- 1

# maximum simulation time
tMax <- 40

# temperature-dependent speciation
p_t <- function(t, temp) {
 return(0.025*exp(0.1*temp))
}

# extinction
q <- 0.075

# get the temperature data
data(temp)

# speciation
p <- make.rate(p_t, envF = temp)

# run simulations
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))

# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
  phy <- make.phylo(sim)
  ape::plot.phylo(phy)
}

# note nFinal has to be sensible
\dontrun{
# this would return a warning, since it is virtually impossible to get 100
# species at a process with diversification rate -0.09 starting at n0 = 1
sim <- bd.sim.general(1, pp = 0.01, qq = 1, tMax = 100, nFinal = c(100, Inf))
}

}
\author{
Bruno do Rosario Petrucci.
}
