% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findClades.R
\name{findClades}
\alias{findClades}
\title{Separate a PaleoBuddy simulation into monophyletic clades}
\usage{
findClades(sim)
}
\arguments{
\item{sim}{a simulation from the \code{BDSim} function. The
function accept simulations with any number of starting species.}
}
\value{
A \code{list} object with (named) monophyletic clades
generated by a PaleoBuddy simulation.
}
\description{
\code{findClades} find an separate monophyletic clades from the
\code{BDSim} function. Note that the function is uneffective
in simulations with just a single starting species.
}
\examples{

# first, let us try a simulation with 3 clades,
sim<-BDSim(N0 = 3, pp = .1, qq = 0.1, tmax = 10)

# in case first simulation has a small number of lineages
while(length(sim$TE)<20){
  sim<-BDSim(N0 = 3, pp = .1, qq = 0.1, tmax = 10)
}

# using the functions
test <- findClades(sim)

# testing if it works:
par(mfrow=c(1,length(test)))
for(i in 1:length(test)){
  if(sum(test[[i]]$PAR \%in\% i)<1){
    plot(NA, xlim = c(-1,1), ylim=c(-1,1))
    text("simulation with \n just one lineage", x = 0, y=.5, cex=2)
  }else{
    if(requireNamespace("ape", quietly = TRUE)) {
      p=ape::plot.phylo(MakePhylo(test[[i]]),
                        main="red = extinction events \n blue = speciation events");
      ape::axisPhylo()
    }

    # checking speciation times:
    for(j in 2:length(test[[i]]$TS)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TS[j],
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TS[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="blue")
    }

    # checking extinction times:
    for(j in 1:length(sim$TE)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TE[j],
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TE[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="red")
    }
  }
}

# it works with any number of clades, of course
sim<-BDSim(N0 = 5, pp = .1, qq = 0.1, tmax = 10)

# in case first simulation has a small number of lineages
while(length(sim$TE)<20){
  sim<-BDSim(N0 = 5, pp = .1, qq = 0.1, tmax = 10)
}

# using the functions
test <- findClades(sim)

# testing if it works:
par(mfrow=c(1,length(test)))
for(i in 1:length(test)){
  if(sum(test[[i]]$PAR \%in\% i)<1){
    plot(NA, xlim = c(-1,1), ylim=c(-1,1))
    text("simulation with \n just one lineage", x = 0, y=.5, cex=2)
  }else{
    if(requireNamespace("ape", quietly = TRUE)) {
      p=ape::plot.phylo(MakePhylo(test[[i]]),
                        main="red = extinction events \n blue = speciation events");
      ape::axisPhylo()
    }

    # checking speciation times:
    for(j in 2:length(test[[i]]$TS)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TS[j],
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TS[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="blue")
    }

    # checking extinction times:
    for(j in 1:length(sim$TE)){
      # the subtraction is just to adjust the wt with the plot scale
      lines(x=c(
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TE[j],
        sort(test[[i]]$TS, decreasing = T)[2]-test[[i]]$TE[j]),
        y=c(p$y.lim[1],p$y.lim[2]),lwd=2, col="red")
    }
  }
}

# including one clade, of course
sim<-BDSim(N0 = 1, pp = .2, qq = 0.1, tmax = 10)
while(length(sim$TE)<10){
 sim<-BDSim(N0 = 1, pp = .1, qq = 0.1, tmax = 10)
}


par(mfrow=c(1,2))
if (requireNamespace("ape", quietly = TRUE)) {
 ape::plot.phylo(MakePhylo(sim), main="original")
 ape::axisPhylo()
 ape::plot.phylo(MakePhylo(findClades(sim)[[1]]), main="after findClades()")
 ape::axisPhylo()     
 #those should be equal
}
}
\author{
written by Bruno Petrucci and Matheus Januario
}
