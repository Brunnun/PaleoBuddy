% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rexp_var.R
\name{rexp_var}
\alias{rexp_var}
\title{Returns a wait time for an exponential or weibull distribution with constant
or time-varying parameters}
\usage{
rexp_var(n = 1, lambda, now, tmax, shape = NULL, TS = NULL, fast = TRUE)
}
\arguments{
\item{n}{the number of times to return. The default is 1, but
we allow for a higher \code{n} to be consistent with the \code{rexp}
function.}

\item{lambda}{the rate parameter for the exponential
distribution. If shape is not NULL, \code{lambda} is a scale for the Weibull.
In both cases we allow for any time-varying function. If one wants a
constant, please use \code{lambda <- function(t) {return(constant)}}.}

\item{now}{the current time. Needed so that we consider only the
interval between the current time and the maximum time for the time-varying
rate. Notice this does means the waiting time is >= \code{now}, so one must
subtract \code{now} from the waiting time when using it.}

\item{tmax}{the simulation ending time. If the waiting time
would be too high, we return \code{2*tmax} to signify the event never
happens. The function only considers the rate between \code{now} and
\code{tmax}.}

\item{shape}{the shape of a weibull distribution. If not NULL,
the distribution is taken to be a weibull. Otherwise, it is considered an
exponential.

Notes: if \code{shape} is really low it may be impossible
for \code{uniroot} to find a root. Time-varying shape is implemented, but
not yet thoroughly tested.}

\item{TS}{if shape is given, there must be a TS parameter to
account for the scaling between simulation and species time. Supplying one
without the other leads to an error.}

\item{fast}{if set to FALSE, waiting times larger than the max
simulation time will not be thrown away. Needed when testing the function.}
}
\value{
a vector of waiting times for the exponential or weibull
distribution with the given rates.
}
\description{
\code{rexp_var} uses a rate (that could be constant or time-varying), a range
of time and optionally a shape for age dependent rates. It also takes a
number of waiting times to return. This can serve both for an exponential
distribution, and a weibull distribution with varying parameters.
}
\examples{

# Note: to effectively test, you must pass \code{fast=FALSE} to the function.

# use the \code{fitdistrplus} package to see if our distributions fit what
# we expect
if (requireNamespace("fitdistrplus", quietly=TRUE)) {
  # let us start by checking a simple exponential variable
  lambda <- 0.1
  now <- 0
  tmax <- 40
  dis <- rexp_var(n=10000, lambda, now, tmax, fast=FALSE)
  rate <- unname(fitdistrplus::fitdist(dis, distr="exp")$estimate)

  print(paste("rate: ",paste(rate, paste(", expected: ", lambda))))

  # another simple exponential
  lambda <- 0.5
  dis <- rexp_var(n=10000, lambda, now, tmax, fast=FALSE)
  rate <- unname(fitdistrplus::fitdist(dis, distr="exp")$estimate)
  print(paste("rate: ", paste(rate, paste(", expected: ", lambda))))

  # now let us try a linear function
  lambda <- function(t) {
    return(0.01 * t + 0.1)
  }
  dis <- rexp_var(n=10000, lambda, now, tmax, fast=FALSE)
  rate <- unname(fitdistrplus::fitdist(dis, distr="exp")$estimate)

  # we can integrate to find the mean rate
  f <- Vectorize(function(t) {
    ifelse(lambda(t) == Inf, 0,
           exp(-integrate(function(x) lambda(x),
                          lower=0, upper=t, subdivisions=2000)$value))})
  mean <- 1/integrate(f, 0, Inf)$value
  print(paste("rate: ", paste(rate, paste(", expected: ", mean))))

  # and we can also integrate to find the mean directly
  p <- Vectorize(function(t) {
    return(
      ifelse(lambda(t) == Inf, 0,
             lambda(t)*exp(-integrate(Vectorize(
               function(x) lambda(x)), lower=0, upper=t)$value))
    )
  })
  mean<-integrate(function(t) t*p(t), 0, Inf)$value
  print(paste("mean: ", paste(mean(dis), paste(", expected: ", mean))))

  # what if lambda is exponential?
  lambda <- function(t) {
    return(0.01 * exp(0.1*t) + 0.02)
  }
  dis <- rexp_var(n=10000, lambda, now, tmax, fast=FALSE)
  rate <- unname(fitdistrplus::fitdist(dis, distr="exp")$estimate)
  f <- Vectorize(function(t) {
    ifelse(lambda(t) == Inf, 0,
           exp(-integrate(function(x) lambda(x),
                          lower=0, upper=t, subdivisions=2000)$value))})

  mean <- 1/integrate(f, 0, Inf)$value
  print(paste("rate: ", paste(rate, paste(", expected: ", mean))))

  p <- Vectorize(function(t) {
    return(
      ifelse(lambda(t) == Inf, 0,
             lambda(t)*exp(-integrate(Vectorize(
               function(x) lambda(x)), lower=0, upper=t)$value))
    )
  })
  mean <- integrate(function(t) t*p(t), 0, Inf)$value
  print(paste("rate: ", paste(mean(dis), paste(", expected: ", mean))))

  # now we can also test the age dependency
  lambda <- 2
  shape <- 1
  dis <- rexp_var(n=5000, lambda, now, tmax, shape = shape, TS = 0, fast=FALSE)

  e_shape <- unname(fitdistrplus::fitdist(dis, distr = "weibull")$estimate)[1]
  e_scale <- unname(fitdistrplus::fitdist(dis, distr = "weibull")$estimate)[2]

  print(paste("shape: ", paste(e_shape, paste(", expected: ", shape))))
  print(paste("scale: ", paste(e_scale, paste(", expected: ", lambda))))

  # shape = 1 is an exponential, we could do better
  lambda <- 10
  shape <- 2
  dis <- rexp_var(n=10000, lambda, now, tmax, shape = shape, TS = 0, fast=FALSE)

  e_shape <- unname(fitdistrplus::fitdist(dis, distr = "weibull")$estimate)[1]
  e_scale <- unname(fitdistrplus::fitdist(dis, distr = "weibull")$estimate)[2]

  print(paste("shape: ", paste(e_shape, paste(", expected: ", shape))))
  print(paste("scale: ", paste(e_scale, paste(", expected: ", lambda))))

  # fitdist gets a bit weird with shape less than 1,
  # so we need some extra arguments to get a fit
  lambda <- 10
  shape <- 0.5
  dis <- rexp_var(n=10000, lambda, now, tmax, shape = shape, TS = 0, fast=FALSE)

  e_shape <- unname(fitdistrplus::fitdist(dis, distr = "weibull",
                                         start=list(shape=1,scale=1),
                              method="mge", gof="CvM")$estimate)[1]
  e_scale <- unname(fitdistrplus::fitdist(dis, distr = "weibull",
                                          start=list(shape=1,scale=1),
                              method="mge", gof="CvM")$estimate)[2]

  print(paste("shape: ", paste(e_shape, paste(", expected: ", shape))))
  print(paste("scale: ", paste(e_scale, paste(", expected: ", lambda))))

  # when lambda and shape vary, we might need to do some more to test
  lambda <- function(t) {
    return(0.25*t + 5)
  }
  shape <- 3
  dis <- rexp_var(n=5000, lambda, now, tmax, shape = shape, TS = 0, fast=FALSE)

  # we will integrate the distribution to find the mean directly
  p <- Vectorize(function(t) {
    res<-shape/lambda(t)*(integrate(
      Vectorize(function(x) 1/lambda(x)), lower = 0, upper = t,
      subdivisions=2000)$value)^(shape-1)*
      exp(-(integrate(Vectorize(function(x) 1/lambda(x)), 0, t,
                      subdivisions=2000)$value)^shape)
    # na simply means R doesn't know how to multiply 0 by infinity, but we just
    # need to make it 0 since t*exp(-t) goes to 0 when t goes to infinity
    return(res)
  })
  mean <- integrate(function(t) t*p(t), 0, Inf)$value
  print(paste("rate: ", paste(mean(dis), paste(", expected: ", mean))))

  # lambda can be any function of time, remember
  lambda <- function(t) {
    return(0.2*exp(0.1*t) + 5)
  }
  shape <- 3
  dis <- rexp_var(n=10000, lambda, now, tmax, shape = shape, TS = 0, fast=FALSE)

  p <- Vectorize(function(t) {
    res<-shape/lambda(t)*(integrate(
      Vectorize(function(x) 1/lambda(x)), lower = 0, upper = t,
      subdivisions=2000)$value)^(shape-1)*
      exp(-(integrate(Vectorize(function(x) 1/lambda(x)), 0, t,
                      subdivisions=2000)$value)^shape)
    # na simply means R doesn't know how to multiply 0 by infinity, but we just
    # need to make it 0 since t*exp(-t) goes to 0 when t goes to infinity
    return(ifelse(is.na(res), 0, res))
  })
  mean <- integrate(function(t) t*p(t), 0, Inf)$value
  print(paste("rate: ", paste(mean(dis), paste(", expected: ", mean))))
}


}
\author{
written by Bruno do Rosario Petrucci; the idea for calculating
an exponentially distributed variable t using \code{1-p = exp(t)} came from
\code{baseR}'s own \code{rexp} and \href{https://rdrr.io/cran/ape/f/}{APE}.
}
