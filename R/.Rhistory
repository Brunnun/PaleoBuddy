while ((tNow + waitTimeS) <= min(tExp, tMax)) {
# advance to the time of speciation
tNow <- tNow + waitTimeS
# add new times to the vectors
TS <- c(TS, tNow)
TE <- c(TE, NA)
parent <- c(parent, sCount)
isExtant <- c(isExtant, TRUE)
# get a new speciation waiting time, and include it in the vector
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
}
# reached the time of extinction
tNow <- tExp
# record extinction, and if species is extant make it more than tMax
TE[sCount] <- ifelse(tNow < tMax | trueExt, tNow, tMax + 0.01)
isExtant[sCount] <- ifelse(TE[sCount] > tMax, TRUE, FALSE)
# next species
sCount <- sCount + 1
}
# now we invert TE and TS so time goes from tMax to 0
TE <- tMax - TE
TS <- tMax - TS
# check the size of the simulation
len <- ifelse(extOnly, sum(isExtant), length(isExtant))
# if this is in nFinal, the while loop stops
# if we have ran for too long, stop
counter <- counter + 1
if (counter > 100000) {
warning("This value of nFinal took more than 100000 simulations
to achieve")
return(NA)
}
}
return(list(TE = TE, TS = TS, PAR = parent, EXTANT = isExtant))
}
if (requireNamespace("RPANDA", quietly = TRUE)) {
# initial number of species
n0 <- 1
# maximum simulation time
tMax <- 40
# temperature-dependent speciation
p_t <- function(t, temp) {
return(0.04*exp(0.15*temp))
}
# extinction
q <- 0.075
# using RPANDA to get the temperature data
data(InfTemp, package="RPANDA")
# speciation
p <- make.rate(p_t, tMax, envF = InfTemp)
# since we need many species to be able to test this effectively using
# RPANDA, and the rates become really noisy with temperature, we set
# only 100 simulations to finish it in a reasonable time
# run simulations
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
phy <- make.phylo(sim)
ape::plot.phylo(phy)
}
}
# note nFinal has to be sensible
\dontrun{
# this would return an error
sim <- bd.sim.general(1, pp = 0.01, qq = 1, tMax = 100, nFinal = c(100, Inf))
load_all()
if (requireNamespace("RPANDA", quietly = TRUE)) {
# initial number of species
n0 <- 1
# maximum simulation time
tMax <- 40
# temperature-dependent speciation
p_t <- function(t, temp) {
return(0.04*exp(0.15*temp))
}
# extinction
q <- 0.075
# using RPANDA to get the temperature data
data(InfTemp, package="RPANDA")
# speciation
p <- make.rate(p_t, tMax, envF = InfTemp)
# since we need many species to be able to test this effectively using
# RPANDA, and the rates become really noisy with temperature, we set
# only 100 simulations to finish it in a reasonable time
# run simulations
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
phy <- make.phylo(sim)
ape::plot.phylo(phy)
}
}
# note nFinal has to be sensible
\dontrun{
# this would return an error
sim <- bd.sim.general(1, pp = 0.01, qq = 1, tMax = 100, nFinal = c(100, Inf))
bd.sim.general <- function(n0, pp, qq, tMax,
pShape = NULL, qShape = NULL,
nFinal = c(0, Inf), extOnly = FALSE,
fast = TRUE, trueExt = FALSE) {
# initialize species count with a value that makes sure the while loop runs
len <- -1
# counter to make sure the nFinal is achievable
counter <- 1
# if shape is not null, make scale a function to facilitate checking
if (!is.null(pShape)) {
p <- pp
pp <- ifelse(is.numeric(p), Vectorize(function(t) p), p)
}
if (!is.null(qShape)) {
q <- qq
qq <- ifelse(is.numeric(q), Vectorize(function(t) q), q)
}
while (len < nFinal[1] | len > nFinal[2]) {
# create vectors to hold times of speciation, extinction, parents and status
TS <- rep(-0.01, n0)
TE <- rep(NA, n0)
parent <- rep(NA, n0)
isExtant <- rep(TRUE, n0)
# initialize species count
sCount <- 1
# while we have species to be analyzed still
while (length(TE) >= sCount) {
# get speciation time, if it matters
print(pShape)
print(TS[sCount])
specT <- ifelse(!is.null(pShape), TS[sCount], NULL)
# get the time of speciation, or 0 if the species
# was there at the beginning
tNow <- ifelse(TS[sCount] < 0, 0, TS[sCount])
# find the waiting time using rexp.var
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
waitTimeE <- ifelse(
is.numeric(qq), rexp(1, qq),
ifelse(qq(tNow) > 0,
rexp.var(1, qq, tNow, tMax, qShape, specT, fast), Inf))
tExp <- tNow + waitTimeE
# while there are fast enough speciations before the species goes extinct,
while ((tNow + waitTimeS) <= min(tExp, tMax)) {
# advance to the time of speciation
tNow <- tNow + waitTimeS
# add new times to the vectors
TS <- c(TS, tNow)
TE <- c(TE, NA)
parent <- c(parent, sCount)
isExtant <- c(isExtant, TRUE)
# get a new speciation waiting time, and include it in the vector
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
}
# reached the time of extinction
tNow <- tExp
# record extinction, and if species is extant make it more than tMax
TE[sCount] <- ifelse(tNow < tMax | trueExt, tNow, tMax + 0.01)
isExtant[sCount] <- ifelse(TE[sCount] > tMax, TRUE, FALSE)
# next species
sCount <- sCount + 1
}
# now we invert TE and TS so time goes from tMax to 0
TE <- tMax - TE
TS <- tMax - TS
# check the size of the simulation
len <- ifelse(extOnly, sum(isExtant), length(isExtant))
# if this is in nFinal, the while loop stops
# if we have ran for too long, stop
counter <- counter + 1
if (counter > 100000) {
warning("This value of nFinal took more than 100000 simulations
to achieve")
return(NA)
}
}
return(list(TE = TE, TS = TS, PAR = parent, EXTANT = isExtant))
}
n0 <- 1
# maximum simulation time
tMax <- 40
# temperature-dependent speciation
p_t <- function(t, temp) {
return(0.04*exp(0.15*temp))
}
# extinction
q <- 0.075
# using RPANDA to get the temperature data
data(InfTemp, package="RPANDA")
# speciation
p <- make.rate(p_t, tMax, envF = InfTemp)
# run simulations
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
pShape<-NULL
TS[sCount] <- -0.01
TS <- c
TS <- c()
TS <- c(TS, -0.01)
sCount <- 1
specT <- ifelse(!is.null(pShape), TS[sCount], NULL)
!is.null(pShape)
specT <- ifelse(is.null(pShape), NULL,
ifelse(TS[sCount] < 0,
0, TS[sCount]), NULL)
specT <- ifelse(is.null(pShape), NULL,
ifelse(TS[sCount] < 0,
0, TS[sCount]))
specT <- NULL
if (!is.null(pShape)) specT <- ifelse(TS[sCount] < 0, 0, TS[sCount])
bd.sim.general <- function(n0, pp, qq, tMax,
pShape = NULL, qShape = NULL,
nFinal = c(0, Inf), extOnly = FALSE,
fast = TRUE, trueExt = FALSE) {
# initialize species count with a value that makes sure the while loop runs
len <- -1
# counter to make sure the nFinal is achievable
counter <- 1
# if shape is not null, make scale a function to facilitate checking
if (!is.null(pShape)) {
p <- pp
pp <- ifelse(is.numeric(p), Vectorize(function(t) p), p)
}
if (!is.null(qShape)) {
q <- qq
qq <- ifelse(is.numeric(q), Vectorize(function(t) q), q)
}
while (len < nFinal[1] | len > nFinal[2]) {
# create vectors to hold times of speciation, extinction, parents and status
TS <- rep(-0.01, n0)
TE <- rep(NA, n0)
parent <- rep(NA, n0)
isExtant <- rep(TRUE, n0)
# initialize species count
sCount <- 1
# while we have species to be analyzed still
while (length(TE) >= sCount) {
# get speciation time, if it matters
specT <- NULL
if (!is.null(pShape)) specT <- ifelse(TS[sCount] < 0, 0, TS[sCount])
# get the time of speciation, or 0 if the species
# was there at the beginning
tNow <- ifelse(TS[sCount] < 0, 0, TS[sCount])
# find the waiting time using rexp.var
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
waitTimeE <- ifelse(
is.numeric(qq), rexp(1, qq),
ifelse(qq(tNow) > 0,
rexp.var(1, qq, tNow, tMax, qShape, specT, fast), Inf))
tExp <- tNow + waitTimeE
# while there are fast enough speciations before the species goes extinct,
while ((tNow + waitTimeS) <= min(tExp, tMax)) {
# advance to the time of speciation
tNow <- tNow + waitTimeS
# add new times to the vectors
TS <- c(TS, tNow)
TE <- c(TE, NA)
parent <- c(parent, sCount)
isExtant <- c(isExtant, TRUE)
# get a new speciation waiting time, and include it in the vector
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
}
# reached the time of extinction
tNow <- tExp
# record extinction, and if species is extant make it more than tMax
TE[sCount] <- ifelse(tNow < tMax | trueExt, tNow, tMax + 0.01)
isExtant[sCount] <- ifelse(TE[sCount] > tMax, TRUE, FALSE)
# next species
sCount <- sCount + 1
}
# now we invert TE and TS so time goes from tMax to 0
TE <- tMax - TE
TS <- tMax - TS
# check the size of the simulation
len <- ifelse(extOnly, sum(isExtant), length(isExtant))
# if this is in nFinal, the while loop stops
# if we have ran for too long, stop
counter <- counter + 1
if (counter > 100000) {
warning("This value of nFinal took more than 100000 simulations
to achieve")
return(NA)
}
}
return(list(TE = TE, TS = TS, PAR = parent, EXTANT = isExtant))
}
n0 <- 1
# maximum simulation time
tMax <- 40
# temperature-dependent speciation
p_t <- function(t, temp) {
return(0.04*exp(0.15*temp))
}
# extinction
q <- 0.075
# using RPANDA to get the temperature data
data(InfTemp, package="RPANDA")
# speciation
p <- make.rate(p_t, tMax, envF = InfTemp)
# run simulations
sim <- bd.sim.general(n0, p, q, tMax, nFinal = c(2, Inf))
bd.sim.general <- function(n0, pp, qq, tMax,
pShape = NULL, qShape = NULL,
nFinal = c(0, Inf), extOnly = FALSE,
fast = TRUE, trueExt = FALSE) {
# initialize species count with a value that makes sure the while loop runs
len <- -1
# counter to make sure the nFinal is achievable
counter <- 1
# if shape is not null, make scale a function to facilitate checking
if (!is.null(pShape)) {
p <- pp
pp <- ifelse(is.numeric(p), Vectorize(function(t) p), p)
}
if (!is.null(qShape)) {
q <- qq
qq <- ifelse(is.numeric(q), Vectorize(function(t) q), q)
}
while (len < nFinal[1] | len > nFinal[2]) {
# create vectors to hold times of speciation, extinction, parents and status
TS <- rep(-0.01, n0)
TE <- rep(NA, n0)
parent <- rep(NA, n0)
isExtant <- rep(TRUE, n0)
# initialize species count
sCount <- 1
# while we have species to be analyzed still
while (length(TE) >= sCount) {
# get speciation time, if it matters
specT <- NULL
if (!is.null(pShape) | !is.null(qShape)) {
specT <- ifelse(TS[sCount] < 0, 0, TS[sCount])
}
# get the time of speciation, or 0 if the species
# was there at the beginning
tNow <- ifelse(TS[sCount] < 0, 0, TS[sCount])
# find the waiting time using rexp.var
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
waitTimeE <- ifelse(
is.numeric(qq), rexp(1, qq),
ifelse(qq(tNow) > 0,
rexp.var(1, qq, tNow, tMax, qShape, specT, fast), Inf))
tExp <- tNow + waitTimeE
# while there are fast enough speciations before the species goes extinct,
while ((tNow + waitTimeS) <= min(tExp, tMax)) {
# advance to the time of speciation
tNow <- tNow + waitTimeS
# add new times to the vectors
TS <- c(TS, tNow)
TE <- c(TE, NA)
parent <- c(parent, sCount)
isExtant <- c(isExtant, TRUE)
# get a new speciation waiting time, and include it in the vector
waitTimeS <- ifelse(
is.numeric(pp), rexp(1, pp),
ifelse(pp(tNow) > 0,
rexp.var(1, pp, tNow, tMax, pShape, specT, fast), Inf))
}
# reached the time of extinction
tNow <- tExp
# record extinction, and if species is extant make it more than tMax
TE[sCount] <- ifelse(tNow < tMax | trueExt, tNow, tMax + 0.01)
isExtant[sCount] <- ifelse(TE[sCount] > tMax, TRUE, FALSE)
# next species
sCount <- sCount + 1
}
# now we invert TE and TS so time goes from tMax to 0
TE <- tMax - TE
TS <- tMax - TS
# check the size of the simulation
len <- ifelse(extOnly, sum(isExtant), length(isExtant))
# if this is in nFinal, the while loop stops
# if we have ran for too long, stop
counter <- counter + 1
if (counter > 100000) {
warning("This value of nFinal took more than 100000 simulations
to achieve")
return(NA)
}
}
return(list(TE = TE, TS = TS, PAR = parent, EXTANT = isExtant))
}
load_all
load_all()
#'     ape::plot.phylo(phy)
#'   }
#'
#'   ###
#'   # one can mix and match all of these scenarios as they wish - age-dependency
#'   # and constant rates, age-dependent and temperature-dependent rates, etc. The
#'   # only combination that is not allowed is a vector rate and environmental
#'   # data, but one can get around that as follows
#'
# initial number of species
n0 <- 1
# speciation - a step function of temperature built using ifelse()
p <- function(t, env) {
ifelse(t < 20, 2*env,
ifelse(t < 30, env/2, 2*env/3))
}
# speciation shape
pShape <- 2
# environment variable to use - temperature
envPP <- InfTemp
# extinction - high so this does not take too long to run
q <- 0.3
# maximum simulation time
tMax <- 40
# run the simulation
sim <- bd.sim(n0, p, q, tMax, pShape = pShape, envPP = envPP,
nFinal = c(2, Inf))
# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
phy <- make.phylo(sim)
ape::plot.phylo(phy)
}
}
#'     ape::plot.phylo(phy)
#'   }
#'
#'   ###
#'   # one can mix and match all of these scenarios as they wish - age-dependency
#'   # and constant rates, age-dependent and temperature-dependent rates, etc. The
#'   # only combination that is not allowed is a vector rate and environmental
#'   # data, but one can get around that as follows
#'
# initial number of species
n0 <- 1
# speciation - a step function of temperature built using ifelse()
p <- function(t, env) {
ifelse(t < 20, 2*env,
ifelse(t < 30, env/2, 2*env/3))
}
# speciation shape
pShape <- 2
# environment variable to use - temperature
envPP <- InfTemp
# extinction - high so this does not take too long to run
q <- 0.3
# maximum simulation time
tMax <- 40
# run the simulation
sim <- bd.sim(n0, p, q, tMax, pShape = pShape, envPP = envPP,
nFinal = c(2, Inf))
# we can plot the phylogeny to take a look
if (requireNamespace("ape", quietly = TRUE)) {
phy <- make.phylo(sim)
ape::plot.phylo(phy)
}
#' }
#'
#' # note nFinal has to be sensible
#' \dontrun{
#' # this would return an error
#' sim <- bd.sim(1, pp = 0.01, qq = 1, tMax = 100, nFinal = c(100, Inf))
#' }
#'
#' @name bd.sim
#' @rdname bd.sim
#' @export
bd.sim <- function(n0, pp, qq, tMax,
pShape = NULL, qShape = NULL,
envPP = NULL, envQQ = NULL,
pShifts = NULL, qShifts = NULL,
nFinal = c(0, Inf), extOnly = FALSE,
fast = TRUE, trueExt = FALSE) {
# if we have ONLY numbers for pp and qq, it is constant
if ((is.numeric(pp) & length(pp) == 1) &
(is.numeric(qq) & length(qq) == 1) &
(is.null(c(pShape, qShape, envPP, envQQ, pShifts, qShifts)))) {
p <- pp
q <- qq
# call bd.sim.constant
return(bd.sim.constant(n0, p, q, tMax, nFinal, extOnly))
}
# else it is not constant
# note even if pp or qq is constant this may call bd.sim.general, since we
# might have a shape parameter
else {
# use make.rate to create the rates we want
p <- make.rate(pp, tMax, envPP, pShifts)
q <- make.rate(qq, tMax, envQQ, qShifts)
# call bd.sim.general
return(bd.sim.general(n0, p, q, tMax, pShape, qShape,
nFinal, extOnly, fast, trueExt))
}
}
n0 <- 1
p <- function(t, env) {
ifelse(t < 20, 2*env,
ifelse(t < 30, env/2, 2*env/3))
}
pShape <- 2
envPP <- InfTemp
q <- 0.3
tMax <- 40
sim <- bd.sim(n0, p, q, tMax, pShape = pShape, envPP = envPP,
nFinal = c(2, Inf))
bd.sim.general()
bd.sim.general
