if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
sampled
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
WaitTimeR<-ifelse(rr(Now)>0,rexp_var(1,rr,Now,tmax), Inf)
# advance in time
Now<-Now+WaitTimeR
# if sampling comes after extinction, we don't include this occurrence
if (Now>End) break
# add to the vector
sampled<-c(sampled,Now)
rexp_var(1, rr, Now, tmax)
lambda<-rr
Now
now<-now
now<-Now
# make a vector to hold the results
vars<-rep(0,n)
# default is not age dependent, will change this later
AD <- FALSE
# make lambda a function if it is a constant
l <- lambda
lambda <- ifelse(is.numeric(lambda),
function(t) {
return(l)
}, l)
# same for shape
if (!is.null(shape)) {
AD <- TRUE
s <- shape
shape <- ifelse(is.numeric(shape),
function(t) {
return(s)
}, s)
}
# draw an uniform random variable from 0 to 1
p<-runif(1)
# same as above but for an exponential variable
if (1-exp(-integrate(Vectorize(function(x) lambda(x)), lower=now,
upper=tmax, subdivisions=2000)$value)<p & fast){
vars[i]<-2*tmax+0.01
}
fast<-TRUE
shape<-NULL
# same as above but for an exponential variable
if (1-exp(-integrate(Vectorize(function(x) lambda(x)), lower=now,
upper=tmax, subdivisions=2000)$value)<p & fast){
vars[i]<-2*tmax+0.01
}
else{
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
1-p-exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=t,
subdivisions=2000)$value)})
vars[i]<-uniroot(f,c(0,tmax),extendInt="yes")$root-now
}
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
1-p-exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=t,
subdivisions=2000)$value)})
f(1)
integrate(Vectorize(function(x) lambda(x)),lower=now,upper=t,
subdivisions=2000)$value
integrate(Vectorize(function(x) lambda(x)),lower=now,upper=10,
subdivisions=2000)$value
integrate(Vectorize(function(x) lambda(x)),lower=now,upper=11,
subdivisions=2000)$value
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=11,
subdivisions=2000)$value
)
1-p-exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=11,
subdivisions=2000)$value)
1-p-exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=110,
subdivisions=2000)$value)
?uniroot
?suppressWarnings()
now
integrate(Vectorize(function(x) lambda(x)),lower=now,upper=10,
subdivisions=2000)$value
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=10,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=100,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=20,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=25,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=34,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=40,
subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=500,
subdivisions=2000)$value)
rexp_var<-function(n=1, lambda, now, tmax, shape = NULL, TS = NULL, fast=TRUE){
# make a vector to hold the results
vars<-rep(0,n)
# default is not age dependent, will change this later
AD <- FALSE
# make lambda a function if it is a constant
l <- lambda
lambda <- ifelse(is.numeric(lambda),
function(t) {
return(l)
}, l)
# same for shape
if (!is.null(shape)) {
AD <- TRUE
s <- shape
shape <- ifelse(is.numeric(shape),
function(t) {
return(s)
}, s)
}
for (i in 1:n){
# draw an uniform random variable from 0 to 1
p<-runif(1)
if (AD){
# if it is age dependent, find the current species time
spnow<-now-TS
# calculate the probability that the event will happen at all
total <- 1-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)), lower=spnow, upper=tmax-TS,
subdivisions=2000)$value)^shape(tmax))
#if the probability is lower than p, the event will not happen
if (total<p & fast){
vars[i]<-2*tmax+0.01
}
else {
# create a function to hold the CDF of the distribution minus the
# uniform variable - if we find t where this is 0, this t is
# distributed as a weibull
f<-Vectorize(function(t) {
1-p-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)),lower=spnow,upper=t,
subdivisions=2000)$value)^shape(t))})
# finding the t where this is 0
vars[i]<-uniroot(f,c(spnow,tmax),extendInt="yes")$root-spnow
}
}
else {
# same as above but for an exponential variable
if (1-exp(-integrate(Vectorize(function(x) lambda(x)), lower=now,
upper=tmax, subdivisions=2000)$value)<p & fast){
vars[i]<-2*tmax+0.01
}
else{
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
# do this to ensure e does not become infinity for really large
# integrals, something R seems to do occasionally
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=t,subdivisions=2000)$value))
1-p-e})
vars[i]<-uniroot(f, c(0,tmax), extendInt="yes")$root-now
}
}
}
return(vars)
}
rexp_var<-function(n=1, lambda, now, tmax, shape = NULL, TS = NULL, fast=TRUE){
{}
}
rexp_var<-function(n=1, lambda, now, tmax, shape = NULL, TS = NULL, fast=TRUE){
# make a vector to hold the results
vars<-rep(0,n)
# default is not age dependent, will change this later
AD <- FALSE
# make lambda a function if it is a constant
l <- lambda
lambda <- ifelse(is.numeric(lambda),
function(t) {
return(l)
}, l)
# same for shape
if (!is.null(shape)) {
AD <- TRUE
s <- shape
shape <- ifelse(is.numeric(shape),
function(t) {
return(s)
}, s)
}
for (i in 1:n){
# draw an uniform random variable from 0 to 1
p<-runif(1)
if (AD){
# if it is age dependent, find the current species time
spnow<-now-TS
# calculate the probability that the event will happen at all
total <- 1-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)), lower=spnow, upper=tmax-TS,
subdivisions=2000)$value)^shape(tmax))
#if the probability is lower than p, the event will not happen
if (total<p & fast){
vars[i]<-2*tmax+0.01
}
else {
# create a function to hold the CDF of the distribution minus the
# uniform variable - if we find t where this is 0, this t is
# distributed as a weibull
f<-Vectorize(function(t) {
1-p-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)),lower=spnow,upper=t,
subdivisions=2000)$value)^shape(t))})
# finding the t where this is 0
vars[i]<-uniroot(f,c(spnow,tmax),extendInt="yes")$root-spnow
}
}
else {
# same as above but for an exponential variable
if (1-exp(-integrate(Vectorize(function(x) lambda(x)), lower=now,
upper=tmax, subdivisions=2000)$value)<p & fast){
vars[i]<-2*tmax+0.01
}
else{
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
# do this to ensure e does not become infinity for really large
# integrals, something R seems to do occasionally
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=t,subdivisions=2000)$value))
1-p-e})
vars[i]<-uniroot(f, c(0,tmax), extendInt="yes")$root-now
}
}
}
return(vars)
}
rexp_var(1, rr, Now, tmax)
Now
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
# do this to ensure e does not become infinity for really large
# integrals, something R seems to do occasionally
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=t,subdivisions=2000)$value))
1-p-e})
f(1)
f(10)
f(50)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=1,subdivisions=2000)$value)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=10,subdivisions=2000)$value)
# do this to ensure e does not become infinity for really large
# integrals, something R seems to do occasionally
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=t,subdivisions=2000)$value))
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
# do this to ensure e does not become infinity for really large
# integrals, something R seems to do occasionally
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=t,subdivisions=2000)$value))
1-p-e})
f(1)
f(100)
f(10)
exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=10,subdivisions=2000)$value)
e <- min(0, exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,
upper=1,subdivisions=2000)$value))
e
plot(1:100,f(1:100))
p
1-p
vars[i]<-uniroot(f, c(0,tmax), extendInt="yes")$root-now
rexp_var<-function(n=1, lambda, now, tmax, shape = NULL, TS = NULL, fast=TRUE){
# make a vector to hold the results
vars<-rep(0,n)
# default is not age dependent, will change this later
AD <- FALSE
# make lambda a function if it is a constant
l <- lambda
lambda <- ifelse(is.numeric(lambda),
function(t) {
return(l)
}, l)
# same for shape
if (!is.null(shape)) {
AD <- TRUE
s <- shape
shape <- ifelse(is.numeric(shape),
function(t) {
return(s)
}, s)
}
for (i in 1:n){
# draw an uniform random variable from 0 to 1
p<-runif(1)
if (AD){
# if it is age dependent, find the current species time
spnow<-now-TS
# calculate the probability that the event will happen at all
total <- 1-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)), lower=spnow, upper=tmax-TS,
subdivisions=2000)$value)^shape(tmax))
#if the probability is lower than p, the event will not happen
if (total<p & fast){
vars[i]<-2*tmax+0.01
}
else {
# create a function to hold the CDF of the distribution minus the
# uniform variable - if we find t where this is 0, this t is
# distributed as a weibull
f<-Vectorize(function(t) {
1-p-exp(-(integrate(
Vectorize(function(x) 1/lambda(x+TS)),lower=spnow,upper=t,
subdivisions=2000)$value)^shape(t))})
# finding the t where this is 0
vars[i]<-uniroot(f,c(spnow,tmax),extendInt="yes")$root-spnow
}
}
else {
# same as above but for an exponential variable
if (1-exp(-integrate(Vectorize(function(x) lambda(x)), lower=now,
upper=tmax, subdivisions=2000)$value)<p & fast){
vars[i]<-2*tmax+0.01
}
else{
# if f(t) = 0, t is exponentially distributed
f<-Vectorize(function(t) {
1-p-exp(-integrate(Vectorize(function(x) lambda(x)),lower=now,upper=t,
subdivisions=2000)$value)})
# if lambda is really high and the integral goes to +-infinity (computationally
# speaking), uniroot substitutes it for a really high/low value instead. Since
# this does not change our results, we accept it and simply suppress the warning
vars[i]<-suppressWarnings(uniroot(f, c(0,tmax), extendInt="yes"))$root-now
}
}
}
return(vars)
}
rexp_var(1, rr, Now, tmax)
rexp_var(1, rr, Now, tmax)
rexp_var(1, rr, Now, tmax)
rexp_var(1, rr, Now, tmax)
