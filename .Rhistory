use_git()
?use_git
load_all()
library(devtools)
load_all()
check()
sim<-BDSim(1,0.1,0.05,40)
sim
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
sim
sim<-BDSim(1,0.1,0.05,40)
sim
sim<-BDSim(1,0.1,40)
sim<-BDSim(1,0.1,0,40)
sim
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
SampleClade<-function(S, sim, rr,tmax,env_rr=NULL,rshifts=NULL,returnTrue=FALSE,stages=NULL, dFUN=NULL, dFUNmax=NULL,...){
# get the speciation and extinction times vectors
TE <- sim$TE[S]
TS <- sim$TS[S]
# check if it is age-dependent
if(is.null(dFUN)){
rr <- MakeRate(rr, tmax, env_rr, rshifts)
} else{
if(!is.numeric(rr) | length(rr)>1){
stop("ADPP cannot be used with time-varing preservation rates")
}
}
# adjusting stages
stages<-sort(stages, decreasing = TRUE)
# sample using Poisson process:
if(is.null(dFUN)){ # independent of age (i.e. occurrences uniformly distributed through the lineage's age)
point_estimates<-lapply(S,Sample,TE=TE,TS=TS,rr=rr,tmax=tmax)
} else{ #dependent of age (i.e. occurrences distributed through the lineage's age accourding to the function provided by the user)
point_estimates<-SampleADPP(S, TS=TS, TE=TE, rr=rr, dFUN = dFUN, dFUNmax = dFUNmax, ...)
}
#wrapping data:
if(!returnTrue){ # output as fossil occurrence binned within stages/bins
res<-data.frame(matrix(nrow=0, ncol=4))
colnames(res)<-c("Species", "Extant", "MaxT", "MinT")
for(i in 1:length(point_estimates)){
binned_occs<-binner(point_estimates[[i]], bins=stages)
for(k in 1:(length(stages)-1)){
if(binned_occs[k]>0){
# make a row of the data frame
aux<-data.frame(Species=i,Extant=NA,MaxT=rep(stages[k], times=binned_occs[k]),MinT=stages[k+1])
res<-rbind(res, aux)
}
}
}
# make the Extant column
res$Extant<-FALSE
res$Extant[res$Species %in% which(sim$EXTANT)]<-TRUE
# and the species column
res$Species<-paste0("spp_", res$Species)
} else{ # output as the "true" times of preservation of each lineage
# if returnTrue=TRUE, get a a data frame with the real sampling times only
res<-data.frame(matrix(nrow=length(unlist(point_estimates)), ncol=3))
if (nrow(res) > 1) {
colnames(res)<-c("Species", "Extant", "SampT")
res$Species<-rep(S, times=lapply(point_estimates, length))
res$Extant<-FALSE
res$Extant[res$Species %in% which(sim$EXTANT)]<-TRUE
res$Species<-paste0("spp_", res$Species)
res$SampT<-unlist(point_estimates)
}
}
return(res)
}
sim<-BDSim(1,0.1,0.05,40)
sim
sim<-BDSim(1,0.1,0.05,40)
sim
sim<-BDSim(1,0.1,0.05,40)
sim
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
sim
SampleClade<-function(S, sim, rr,tmax,env_rr=NULL,rshifts=NULL,returnTrue=FALSE,stages=NULL, dFUN=NULL, dFUNmax=NULL,...){
# get the speciation and extinction times vectors
TE <- sim$TE[S]
TS <- sim$TS[S]
# check if it is age-dependent
if(is.null(dFUN)){
rr <- MakeRate(rr, tmax, env_rr, rshifts)
} else{
if(!is.numeric(rr) | length(rr)>1){
stop("ADPP cannot be used with time-varing preservation rates")
}
}
# adjusting stages
stages<-sort(stages, decreasing = TRUE)
# sample using Poisson process:
if(is.null(dFUN)){ # independent of age (i.e. occurrences uniformly distributed through the lineage's age)
point_estimates<-lapply(S,Sample,TE=TE,TS=TS,rr=rr,tmax=tmax)
} else{ #dependent of age (i.e. occurrences distributed through the lineage's age accourding to the function provided by the user)
point_estimates<-SampleADPP(S, TS=TS, TE=TE, rr=rr, dFUN = dFUN, dFUNmax = dFUNmax, ...)
}
#wrapping data:
if(!returnTrue){ # output as fossil occurrence binned within stages/bins
res<-data.frame(matrix(nrow=0, ncol=4))
colnames(res)<-c("Species", "Extant", "MaxT", "MinT")
for(i in 1:length(point_estimates)){
binned_occs<-binner(point_estimates[[i]], bins=stages)
for(k in 1:(length(stages)-1)){
if(binned_occs[k]>0){
# make a row of the data frame
aux<-data.frame(Species=i,Extant=NA,MaxT=rep(stages[k], times=binned_occs[k]),MinT=stages[k+1])
res<-rbind(res, aux)
}
}
}
# make the Extant column
res$Extant<-FALSE
res$Extant[res$Species %in% which(sim$EXTANT)]<-TRUE
# and the species column
res$Species<-paste0("spp_", res$Species)
} else{ # output as the "true" times of preservation of each lineage
# if returnTrue=TRUE, get a a data frame with the real sampling times only
res<-data.frame(matrix(nrow=length(unlist(point_estimates)), ncol=3))
colnames(res)<-c("Species", "Extant", "SampT")
if (nrow(res) > 1) {
res$Species<-rep(S, times=lapply(point_estimates, length))
res$Extant<-FALSE
res$Extant[res$Species %in% which(sim$EXTANT)]<-TRUE
res$Species<-paste0("spp_", res$Species)
res$SampT<-unlist(point_estimates)
}
}
return(res)
}
SampleClade(1, sim, 100, tmax=10, returnTrue=TRUE)
check()
?check()
check()
